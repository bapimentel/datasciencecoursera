library(readr)
arle_completo_agregado_2020_02 <- read_csv("GitHub/Tarefas/Dados/arle_completo_agregado_2020_02.csv")
View(arle_completo_agregado_2020_02)
View(arle_completo_agregado_2020_02)
View(arle_completo_agregado_2020_02)
v <- c("IDUnique", "IDALUNO", "Tipo_Tentativa", "RESULTADO", "LATENCIA", "Tam_Modelo", "M_C1", "M_C2", "M_C3", "C1_C2", "C1_C3", "C2_C3", "M_Comps_Sum")
data = arle_completo_agregado_2020_02[v]
View(data)
View(data)
write.csv(data, "arle_completo_dist.csv")
library(readr)
arle_completo_dist <- read_csv("GitHub/Tarefas/Dados/arle_completo_dist.csv")
View(arle_completo_dist)
install.packages("stringdist")
# Simple example using optimal string alignment
stringdist("ca","abc")
# computing a 'dist' object
d <- stringdistmatrix(c('foo','bar','boo','baz'))
stringdist(a, b, method = c("osa", "lv", "dl", "hamming", "lcs", "qgram",
"cosine", "jaccard", "jw", "soundex"), useBytes = FALSE, weight = c(d
= 1, i = 1, s = 1, t = 1), q = 1, p = 0, bt = 0,
nthread = getOption("sd_num_thread"))
stringdistmatrix(a, b, method = c("osa", "lv", "dl", "hamming", "lcs",
"qgram", "cosine", "jaccard", "jw", "soundex"), useBytes = FALSE,
weight = c(d = 1, i = 1, s = 1, t = 1), q = 1, p = 0, bt = 0,
useNames = c("none", "strings", "names"),
nthread = getOption("sd_num_thread"))
# Simple example using optimal string alignment
stringdist("ca","abc")
d <- stringdistmatrix(c('foo','bar','boo','baz'))
source(stringdist)
source("stringdist")
library("stringdist")
d <- stringdistmatrix(c('foo','bar','boo','baz'))
d
stringdistmatrix(c("foo","bar","boo"),c("baz","buz"))
stringdist("ab","abc",method="h")
stringdist("hello","HeLl0",method="h")
stringdist("hello","HeLl0",method="cosine")
stringdist("hello","Hello",method="cosine")
stringdist("hello","hello",method="cosine")
stringdist("hello","hello ",method="cosine")
stringdist("hello","hello",method="cosine")
a <- " xx yy 11 22 33 "
str_replace_all(string=a, pattern=" ", repl="")
a=0
a+4
e
exp(1)
exp(-1)
a=0
a[1] = 1
a
a[2] = 3
a
runif(4,0,1)
a=runif(4,0,1)
a[1]
source("C:/Users/Bruno Pimentel/Desktop/desvios.R")
desvio()
round(0.03124423455, digits=2)
source("C:/Users/Bruno Pimentel/Desktop/desvios.R")
desvio()
source("C:/Users/Bruno Pimentel/Desktop/desvios.R")
desvio()
source("C:/Users/Bruno Pimentel/Desktop/desvios.R")
desvio()
desvio()
desvio()
source("C:/Users/Bruno Pimentel/Desktop/desvios.R")
desvio()
desvio()
desvio()
desvio()
desvio()
desvio()
desvio()
desvio()
desvio()
desvio()
desvio()
source("C:/Users/Bruno Pimentel/Desktop/desvios.R")
desvio()
aes()
check()
sessionInfo()
install.packages("KernSmooth)
""
)0
;
00pok
''
''"
install.packages("KernSmooth")
packageDescription('KernSmooth')[]
library(KernSmooth)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
source("a")
data(vowel.test)
source('C:/Users/Bruno Pimentel/Desktop/a.R')
install.packages("ElemStatLearn")
library(ElemStatLearn)
print("a")
data_testing <- read.csv(file = 'Data/pml-testing.csv')
setwd("C:/Users/Bruno Pimentel/Documents/GitHub/datasciencecoursera")
source('~/GitHub/datasciencecoursera/main.R')
View(data_testing)
View(data_testing)
View(data_training)
View(data_training)
lenght(data_training)
length(data_training)
nrow(data_training)
source('~/GitHub/datasciencecoursera/main.R')
source('~/GitHub/datasciencecoursera/main.R')
View(data_training)
View(data_training)
1:6
data_training <- data_training[,-c(1:6)]
source('~/GitHub/datasciencecoursera/main.R')
source('~/GitHub/datasciencecoursera/main.R')
lapply(data_training, as.numeric)
View(data_training)
View(data_training)
data_training
describe(data_training)
data_training$classe
d = data_training[-data_training$classe]
d = subset(data_training, select = -classe)
View(d)
View(d)
source('~/GitHub/datasciencecoursera/main.R')
source('~/GitHub/datasciencecoursera/main.R')
y_train
source('~/GitHub/datasciencecoursera/main.R')
source('~/GitHub/datasciencecoursera/main.R')
1:4+c(1,5,7)
cbind(1:4,c(1,6,8,3))
rbind(1:4,c(1,6,8,3))
append(1:4,c(1,6,8,3))
View(data_training)
View(data_training)
data_training <- read.csv(file = 'Data/pml-training.csv')
data_training <- data_training[,-append(c(1:30),c(44,50))]
View(data_training)
View(data_training)
data_training <- read.csv(file = 'Data/pml-training.csv')
View(data_training)
View(data_training)
View(data_training)
View(data_training)
data_training[is.na(data_training)] <- 0
source('~/GitHub/datasciencecoursera/main.R')
View(x_train)
View(x_train)
View(data_training)
View(data_training)
data_training <- read.csv(file = 'Data/pml-training.csv')
data_training <- data_training[,-c(1,7)]
View(data_training)
View(data_training)
data_training <- read.csv(file = 'Data/pml-training.csv')
data_training <- data_training[,-1:7]
data_training <- data_training[,-(1:7)]
View(data_training)
View(data_training)
data_training[is.na(data_training)] <- 0
View(data_training)
data_training <- read.csv(file = 'Data/pml-training.csv')
View(data_training)
View(data_training)
data_training <- data_training[,-append(1:7, c(12:36),c(50,160))]
data_training <- data_training[,-append(1:7, 12:36,50:160)]
append(1:7, 12:36, 50:160)
append(append(1:7, 12:36), 50:160)
source('~/GitHub/datasciencecoursera/main.R')
data_training <- read.csv(file = 'Data/pml-training.csv')
data_training[160]
source('~/GitHub/datasciencecoursera/main.R')
View(x_train)
View(x_train)
set.seed(71)
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,
proximity=TRUE)
print(iris.rf)
install.packages("randomForest")
source("randomForest")
library(randomForest)
library(randomForest)
data(iris)
iris.rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
View(iris.rf)
View(iris.rf)
abs(-1)
sum(c(1,2,3))
sum(c(1,2,3)==c(1,2,2))
source('~/GitHub/datasciencecoursera/main.R')
source('~/GitHub/datasciencecoursera/main.R')
source('~/GitHub/datasciencecoursera/main.R')
View(iris.rf)
View(iris.rf)
iris.rf$predicted
iris.rf$predicted
test.err<-double(13)
test.err<-double(13)
source('~/GitHub/datasciencecoursera/main.R')
source('~/GitHub/datasciencecoursera/main.R')
source('~/GitHub/datasciencecoursera/main.R')
nrow(y_test)
y_test <- test_xy$classe
nrow(y_test)
length(y_test)
length(y_test$classe)
source('~/GitHub/datasciencecoursera/main.R')
source('~/GitHub/datasciencecoursera/main.R')
cv_tmp
mean(cv)
mean(cv_tmp)
std(cv_tmp)
sd(cv_tmp)
print(mean(cv_tmp), sd(cv_tmp))
source('~/GitHub/datasciencecoursera/main.R')
